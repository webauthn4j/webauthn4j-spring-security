/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext{
        //Plugins
        springBootVersion = '3.3.1'
        sonarqubeVersion = '5.0.0.4638'
        asciidoctorGradleVersion = "4.0.2"
        artifactoryVersion = '5.2.2'
        bintrayVersion = '1.8.5'
        httpBuilderVersion = '0.7.2'

        //Libraries
        webauthn4jVersion = '0.25.0.RELEASE'
        springSecurityVersion = '6.0.2'
        hibernateValidatorVersion = '8.0.1.Final'
        thymeleafVersion = '3.0.4.RELEASE'
        modelMapperVersion = '3.2.0'

        bootstrapVersion = '5.3.3'
        jqueryVersion = '3.7.1'
        fontAwesomeVersion = '6.5.2'
        webjarsLocatorVersion = '0.52'

        log4jdbcVersion = '0.2.7'
        dbunitVersion = '2.8.0'
        springTestDbunitVersion = '1.3.0'
        webDriverManagerVersion = '5.9.1'
        // To use WebAuthn WebDriver extension, alpha release is used here.
        // When stable version is released, and Spring Boot BOM includes it, this need to be removed.
        seleniumVersion = '4.22.0'

    }

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeVersion")
        classpath("org.asciidoctor:asciidoctor-gradle-jvm:$asciidoctorGradleVersion")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:$artifactoryVersion")
        classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayVersion")
        classpath("org.codehaus.groovy.modules.http-builder:http-builder:$httpBuilderVersion")
    }

}

apply plugin: 'org.sonarqube'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'org.asciidoctor.jvm.convert'


group 'com.webauthn4j'
version "${webAuthn4JSpringSecurityVersion}"

repositories {
    mavenCentral() //for jruby used in asciidoctorj
}

def sampleAppProjects = subprojects.findAll { ["fido-server-conformance-test-app", "spa", "spa-angular-client", "mpa"].contains(it.name) }
def webAuthn4JSpringSecurityLibraryProjects = subprojects.findAll { it.name.startsWith('webauthn4j-spring-security') }
def allJavaProjects = new HashSet()
allJavaProjects.addAll(webAuthn4JSpringSecurityLibraryProjects);
allJavaProjects.addAll(sampleAppProjects);

configure(webAuthn4JSpringSecurityLibraryProjects) {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: "maven-publish"

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Xlint:cast"
        options.compilerArgs << "-Xlint:classfile"
        options.compilerArgs << "-Xlint:dep-ann"
        options.compilerArgs << "-Xlint:divzero"
        options.compilerArgs << "-Xlint:fallthrough"
        options.compilerArgs << "-Xlint:overrides"
        options.compilerArgs << "-Xlint:rawtypes"
        options.compilerArgs << "-Xlint:static"
        options.compilerArgs << "-Xlint:deprecation"
        options.compilerArgs << "-Werror"
    }

    javadoc {
        options.charSet = 'UTF-8'
        options.encoding = 'UTF-8'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }

    apply from: "$rootDir/helper.gradle";

    def githubUrl = "https://github.com/webauthn4j/webauthn4j-spring-security"
    def mavenCentralUser = getVariable('MAVEN_CENTRAL_USER', 'mavenCentralUser')
    def mavenCentralPassword = getVariable('MAVEN_CENTRAL_PASSWORD', 'mavenCentralPassword')
    def pgpSigningKey = getVariable('PGP_SIGNING_KEY', 'pgpSigningKey')
    def pgpSigningKeyPassphrase = getVariable('PGP_SIGNING_KEY_PASSPHRASE', 'pgpSigningKeyPassphrase')

    publishing {
        publications {
            standard(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                // "Resolved versions" strategy is used to define dependency version because WebAuthn4J use dependencyManagement (BOM) feature
                // to define its dependency versions. Without "Resolved versions" strategy, version will not be exposed
                // to dependencies.dependency.version in POM file, and it cause warning in the library consumer environment.
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = project.name
//                    description = project.description //TODO: this doesn't work. to be fixed. https://github.com/gradle/gradle/issues/12259
                    url = githubUrl
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'ynojima'
                            name = 'Yoshikazu Nojima'
                            email = 'mail@ynojima.net'
                        }
                    }
                    scm {
                        url = githubUrl
                    }

                    resolveStrategy = Closure.DELEGATE_FIRST
                }
                pom.withXml { pom ->
                    pom.asNode().appendNode("description", project.description) // workaround for https://github.com/gradle/gradle/issues/12259
                }
            }
        }

        repositories {
            maven {
                name = "mavenCentral"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username = "${mavenCentralUser}"
                    password = "${mavenCentralPassword}"
                }
            }
            maven {
                name = "snapshot"
                url = "https://oss.sonatype.org/content/repositories/snapshots"
                credentials {
                    username = "${mavenCentralUser}"
                    password = "${mavenCentralPassword}"
                }
            }
        }
    }

    signing {
        useInMemoryPgpKeys(pgpSigningKey, pgpSigningKeyPassphrase)
        sign publishing.publications.standard
    }

    tasks.withType(Sign) {
        onlyIf { pgpSigningKey != null && pgpSigningKeyPassphrase != null }
    }

    publishStandardPublicationToSnapshotRepository.onlyIf { webAuthn4JSpringSecurityVersion.endsWith("-SNAPSHOT") }
    publishStandardPublicationToMavenCentralRepository.onlyIf { !webAuthn4JSpringSecurityVersion.endsWith("-SNAPSHOT") }


}

configure(sampleAppProjects) {
    apply plugin: 'java'
}


configure(allJavaProjects) {

    sourceCompatibility = 17

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Werror"
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url 'https://jitpack.io' }
    }


    dependencies {
        // BOM
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        implementation platform("org.springframework.security:spring-security-bom:${springSecurityVersion}")

        constraints {
            // Independent libraries
            implementation("com.webauthn4j:webauthn4j-util:$webauthn4jVersion")
            implementation("com.webauthn4j:webauthn4j-core:$webauthn4jVersion")
            implementation("com.webauthn4j:webauthn4j-metadata:$webauthn4jVersion")
            implementation("com.webauthn4j:webauthn4j-test:$webauthn4jVersion")

            // Independent libraries for Sample applications
            implementation("org.hibernate:hibernate-validator:$hibernateValidatorVersion")
            implementation("org.thymeleaf:thymeleaf-testing:$thymeleafVersion")
            implementation("org.modelmapper:modelmapper:$modelMapperVersion")
            implementation("org.lazyluke:log4jdbc-remix:$log4jdbcVersion")

            implementation("org.webjars:bootstrap:$bootstrapVersion")
            implementation("org.webjars:jquery:$jqueryVersion")
            implementation("org.webjars:font-awesome:$fontAwesomeVersion")
            implementation("org.webjars:webjars-locator:$webjarsLocatorVersion")

            implementation("org.dbunit:dbunit:$dbunitVersion")
            implementation("com.github.springtestdbunit:spring-test-dbunit:$springTestDbunitVersion")
            implementation("io.github.bonigarcia:webdrivermanager:$webDriverManagerVersion")
            implementation("org.seleniumhq.selenium:selenium-java:$seleniumVersion")
        }
    }

}

task updateVersionsInDocuments() {
    group = "documentation"
    String regex = "<webauthn4j-spring-security\\.version>.*</webauthn4j-spring-security\\.version>";
    String replacement = "<webauthn4j-spring-security\\.version>" + latestReleasedWebAuthn4JSpringSecurityVersion + "</webauthn4j-spring-security.version>";

    def files = [file('README.md'), file('docs/src/reference/asciidoc/en/introduction.adoc'), file('docs/src/reference/asciidoc/ja/introduction.adoc')]
    files.each { file ->
        String updated = file.getText('UTF-8').replaceFirst(regex, replacement)
        file.setText(updated, 'UTF-8')
    }
}

task generateReleaseNote(type: JavaExec) {
    group = "documentation"
    classpath = files('gradle/lib/github-release-notes-generator.jar')

    args(latestReleasedWebAuthn4JSpringSecurityVersion, file("build/release-note.md").absolutePath, "--spring.config.location=file:" + file("github-release-notes-generator.yml").absolutePath)

}

import org.asciidoctor.gradle.jvm.AsciidoctorTask

task generateReferenceJA(type: AsciidoctorTask) {
    group = "documentation"
    baseDirFollowsSourceDir()
    sourceDir = file("docs/src/reference/asciidoc/ja")
    outputDir = file("build/docs/asciidoc/ja")
    options eruby: 'erubis'
    //noinspection GroovyAssignabilityCheck
    attributes docinfo: '',
            copycss: '',
            icons: 'font',
            'source-highlighter': 'prettify',
            sectanchors: '',
            toc2: '',
            idprefix: '',
            idseparator: '-',
            doctype: 'book',
            numbered: '',
            revnumber: "${webAuthn4JSpringSecurityVersion}"
}

task generateReferenceEN(type: AsciidoctorTask) {
    group = "documentation"
    baseDirFollowsSourceDir()
    sourceDir = file("docs/src/reference/asciidoc/en")
    outputDir = file("build/docs/asciidoc/en")
    options eruby: 'erubis'
    //noinspection GroovyAssignabilityCheck
    attributes docinfo: '',
            copycss: '',
            icons: 'font',
            'source-highlighter': 'prettify',
            sectanchors: '',
            toc2: '',
            idprefix: '',
            idseparator: '-',
            doctype: 'book',
            numbered: '',
            revnumber: "${webAuthn4JSpringSecurityVersion}"
}


sonarqube {
    properties {
        property 'sonar.projectKey', 'webauthn4j-spring-security'
        property 'sonar.issue.ignore.multicriteria', 'e1,e2'
        property 'sonar.issue.ignore.multicriteria.e1.ruleKey', 'java:S110'
        property 'sonar.issue.ignore.multicriteria.e1.resourceKey', '**/*.java'
        property 'sonar.issue.ignore.multicriteria.e2.ruleKey', 'java:S1452'
        property 'sonar.issue.ignore.multicriteria.e2.resourceKey', '**/*.java'
    }
}
